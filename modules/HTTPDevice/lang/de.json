{
	"m_title":"HTTP-Gerät",
	"m_descr":"Die Anwendung dieser App erfordert solide Kenntnisse in der JavaScript Programmierung. Diese App ermöglicht die Erstellung eines Elements basierend auf Informationen, die Sie durch eine HTTP Abfrage erhalten können. In Abhängigkeit von der Information können Sie einen Binärsensor oder einen mehrstufigen Sensor auswählen. Es ist ebenso möglich, ein Element zu erstellen, welches einige Funktionen via HTTP steuert: In diesem Fall müssen Sie zur Befehlsausführung URLs hinzufügen; bei Binärschaltern ein Link auf „An“ und „Aus“, bei mehrstufigen Schaltern eine URL zur Einstellung des erforderlichen Wertes. Daraus resultiert ein neues Element, das wie ein Element aus dem Smart Home Netzwerk erscheint. <br><br>Einstellungen:<br><ul><li>Wählen Sie zu allererst den Elementtyp, der erstellt werden soll. Weitere Einstellungen sind vom Elementtyp abhängig. </li><li>Alle Geräte benötigen eine URL, um den Wert aus dem Internet abzurufen.</li><li>Es gibt eine Möglichkeit, die Ansprache mit mathematischer Logik zu entwickeln. Dafür werden fundierte Kenntnisse im JavaScript benötigt.</li><li>Bestimmen Sie die Abrufzeit.</li><li>Definieren Sie, ob „POST“ oder „GET“ verwendet wird.</li><li>Bei mehrstufigen Sensoren können Sie den zu verwendenden Maßstab einstellen.</li><li>Bei Schaltern können die URLs für Schaltungen bestimmt werden.</li></ul><br>Beispiel: Eine App soll den aktuellen Wechselkurs zwischen USD und EUR anzeigen. Die verwendete URL kann http://www.floatrates.com/daily/usd.xml sein. Mit dieser XML-Datei ist es möglich, den wirklichen Wechselkurs durch Verwendung des String “parseFloat($$$$.findOne('/channel/item/exchangeRate/text()'))” herauszufiltern. <br>Anwendung: Die App erstellt ein neues Element. In Hinblick auf das oben aufgeführte Beispiel zeigt das Element den Wechselkurs an.",
	"l_schema":"Wählen Sie einen Gerätetyp",
	"l_setterOn":"Schalte das Gerät über die URL an (ON)",
	"p_setterOn":"http://192.168.0.100/action/on",
	"l_setterOff":"Schalte das Gerät über die URL aus (OFF)",
	"p_setterOff":"http://192.168.0.100/action/off",
	"l_getter":"Rufe einen Wert über die URL ab",
	"p_getter":"http://192.168.0.100/get/value",
	"l_getterParser_Binary":"Inline Javascript für das Einlesen der hereinkommenden Daten als 'on'/'off' Strings",
	"h_getterParser_Binary":"Bei keiner Eingabe wird der ankommende String verwendet. Bsp.: $$$$.split(':')[1] oder $$$$.data.metrics.level oder $$$$ === 'ON' ? 'on' : 'off'",
	"l_getterPollInterval":"Abfrageintervall in Sekunden",
	"h_getterPollInterval":"Bei keiner Eingabe oder 0 wird kein Abfrageintervall instanziiert (Explizite update Kommandos funktionieren auch weiterhin)",
	"l_getterParser_Multilevel":"Inline Javascript für das Einlesen eingehender Daten als Zahlen",
	"h_getterParser_Multilevel":"Bei keiner Eingabe wird parseFloat() verwendet. Bsp.: $$$$.split(':'')[1] oder parseInt($$$$, 16) oder $$$$.data.metrics.level oder parseFloat($$$$.findOne('/A/B[C='123']/D/text()'))",
	"l_setterLevel":"Führe eine Aktion über die URL aus",
	"p_setterLevel":"http://192.168.0.100/action/set/$$$$",
	"h_setterLevel":"$$$$ wird benutzt um das Level in der URL zu symbolisieren. Bsp.: http://host/dimmer/level/$$$$/set",
	"l_scale":"Sensor Skala",
	"l_method":"HTTP Methoden",
	"err_req":"Es konnte kein Request gesendet werden: ",
	"rl_updateOnAction": "Update value on action",
	"h_updateOnAction": "On actions (on/off/dimming) update value accordingly before it is polled",
	"rl_skipEventIfSameValue": "Don't send update event if value has not changed",
	"h_skipEventIfSameValue": "If same value is reported, do not send update event. In this case no update listeners will be called.",
	"l_login":"Login",
	"h_login":"If needed, set login",
	"l_password":"Pasword",
	"h_password":"If needed, set password"
}