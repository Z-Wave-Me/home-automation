{
	"m_title":"HTTP Device",
	"m_descr":"The use of this app requires solid knowledge of JavaScript programming. This app allows you creating an element based on information you can get from a HTTP request. Depending on the information you may choose a sensor binary or a sensor multilevel. It is also possible to create an element controlling some functions via HTTP: In this case you need to add URLs for executing the commands; for binary switches one link of “on” and “off”, for multilevel switch an URL to set a value is required. The result is a new element that appears like an element from the Smart Home network.<br><br>Settings:<br><ul><li>First of all you need to choose what type of element shall be created. Depending on the type other settings are required.</li><li>All devices need an URL to call the value from the Internet</li><li>There is a chance to form the response using formal logic. In order to do this some detailed JavaScript knowledge is needed.</li><li>Define the polling time.</li><li>Define if POST or GET is used.</li><li>For Multilevel sensor you can define the scale to be used.</li><li>For Switches the URLS for switching can be defined.</li></ul><br>Example: An app shall show the current exchange rate between USD and EUR. The URL used can be http://www.floatrates.com/daily/usd.xml. This is an XML file, so it is possible to filter out the real exchange rate using the string “parseFloat($$$$.findOne('/channel/item/exchangeRate/text()'))”<br>Usage: The app creates a new element. In case of the example the element will show the exchange rate.",
	"l_setterOn":"URL for action On",
	"p_setterOn":"http://192.168.0.100/action/on",
	"l_setterOff":"URL for action Off",
	"p_setterOff":"http://192.168.0.100/action/off",
	"l_getter":"URL to get value",
	"p_getter":"http://192.168.0.100/get/value",
	"l_getterParser_Binary":"Inline Javascript to parse incoming data to 'on'/'off' strings",
	"h_getterParser_Binary":"Can be empty to use string as is. Example: $$$$.split(':')[1] or $$$$.data.metrics.level or $$$$ === 'ON' ? 'on' : 'off'",
	"l_getterPollInterval":"Interval in seconds between polling requests",
	"h_getterPollInterval":"Empty or 0 to disable periodical requests (explicit update command will still initiate request process)",
	"l_getterParser_Multilevel":"Inline Javascript to parse incoming data to number",
	"h_getterParser_Multilevel":"Can be empty to use parseFloat() function. Example: $$$$.split(':')[1] or parseInt($$$$, 16) or $$$$.data.metrics.level or parseFloat($$$$.findOne('/A/B[C='123']/D/text()'))",
	"l_setterLevel":"URL for action",
	"p_setterLevel":"http://192.168.0.100/action/set/$$$$",
	"h_setterLevel":"$$$$ is used to represent level in the URL. For example: http://host/dimmer/level/$$$$/set",
	"l_scale":"Sensor scale",
	"l_method":"HTTP method to use",
	"err_req":"Can not make request: ",
	"rl_updateOnAction": "Update value on action",
	"h_updateOnAction": "On actions (on/off/dimming) update value accordingly before it is polled",
	"rl_skipEventIfSameValue": "Don't send update event if value has not changed",
	"h_skipEventIfSameValue": "If same value is reported, do not send update event. In this case no update listeners will be called.",
	"l_login":"Login",
	"h_login":"If needed, set login",
	"l_password":"Pasword",
	"h_password":"If needed, set password"
}